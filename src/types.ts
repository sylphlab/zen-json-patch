/**
 * Represents a single JSON Patch operation (RFC 6902).
 */
export type Operation = AddOperation | RemoveOperation | ReplaceOperation | MoveOperation | CopyOperation | TestOperation;

/**
 * Base interface for all patch operations.
 */
interface BaseOperation {
  path: string; // JSON Pointer path
}

/**
 * 'add' operation: Adds a value to an object member or inserts into an array.
 * https://tools.ietf.org/html/rfc6902#section-4.1
 */
export interface AddOperation extends BaseOperation {
  op: 'add';
  value: any; // The value to add
}

/**
 * 'remove' operation: Removes a value from an object member or an array element.
 * https://tools.ietf.org/html/rfc6902#section-4.2
 */
export interface RemoveOperation extends BaseOperation {
  op: 'remove';
}

/**
 * 'replace' operation: Replaces the value at the target location.
 * Semantically equivalent to a 'remove' followed by an 'add'.
 * https://tools.ietf.org/html/rfc6902#section-4.3
 */
export interface ReplaceOperation extends BaseOperation {
  op: 'replace';
  value: any; // The new value
}

/**
 * 'move' operation: Removes the value at one location and adds it to another.
 * Requires a 'from' path.
 * https://tools.ietf.org/html/rfc6902#section-4.4
 */
export interface MoveOperation extends BaseOperation {
  op: 'move';
  from: string; // JSON Pointer path to the value to move
}

/**
 * 'copy' operation: Copies the value from one location to another.
 * Requires a 'from' path.
 * https://tools.ietf.org/html/rfc6902#section-4.5
 */
export interface CopyOperation extends BaseOperation {
  op: 'copy';
  from: string; // JSON Pointer path to the value to copy
}

/**
 * 'test' operation: Tests that a value at the target location is equal to a specified value.
 * Often used for conditional patching. Not typically generated by diff algorithms, but part of the spec.
 * https://tools.ietf.org/html/rfc6902#section-4.6
 */
export interface TestOperation extends BaseOperation {
  op: 'test';
  value: any; // The value to compare against
}

/**
 * Type guard to check if an object is a valid JSON Patch operation.
 * Basic check - doesn't validate path formats or value types deeply.
 * @param op The object to check.
 * @returns True if it resembles a JSON Patch operation.
 */
export function isOperation(op: any): op is Operation {
  if (!op || typeof op !== 'object' || typeof op.op !== 'string' || typeof op.path !== 'string') {
    return false;
  }
  switch (op.op) {
    case 'add':
    case 'replace':
    case 'test':
      return 'value' in op;
    case 'remove':
      return Object.keys(op).length === 2; // Only 'op' and 'path'
    case 'move':
    case 'copy':
      return typeof op.from === 'string';
    default:
      return false;
  }
}
